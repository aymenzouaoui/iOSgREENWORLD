   func verifyResetCode(email: String, resetCode: String, completion: @escaping (Result<User, Error>) -> Void) {
        let url = URL(string: "\(baseURL)/admin/verifyResetCode")!  // Replace with your actual server URL
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        
        let body: [String: String] = [
            "email": email,
            "resetCode": resetCode
        ]
        
        request.httpBody = try? JSONSerialization.data(withJSONObject: body)
     
        URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                completion(.failure(error))
                return
            }
            
            guard let httpResponse = response as? HTTPURLResponse else {
                completion(.failure(NetworkError.invalidResponse))
                return
            }

            if httpResponse.statusCode == 200 {
                if let data = data {
                    do {
                        let user = try JSONDecoder().decode(User.self, from: data)
                        completion(.success(user))
                    } catch {
                        completion(.failure(error))
                    }
                } else {
                    completion(.failure(NetworkError.noData))
                }
            } else {
                // Handle different status codes appropriately
                if let data = data,
                   let jsonObject = try? JSONSerialization.jsonObject(with: data) as? [String: Any],
                   let message = jsonObject["message"] as? String {
                    completion(.failure(NetworkResponseError.custom(message: message)))
                } else {
                    completion(.failure(NetworkError.requestFailed(httpResponse.statusCode)))
                }
            }
        }.resume()
    }
    
