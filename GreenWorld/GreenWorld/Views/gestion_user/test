//
//  ResetPasswordEmailScreen.swift
//  Aqua Guard
//
//  Created by Amira Ben Mbarek on 11/30/23.
//

import SwiftUI

struct ForgotPasswordEmailScreen: View {
    var screenWidth = UIScreen.main.bounds.width
    @State var textValue: String = ""
    @State var errorValue: String = ""
    @StateObject var viewModel: UserViewModel = UserViewModel()
    @State private var navigationActive: Bool = false

    var body: some View {
        ZStack {
            VStack {
                VStack {
                    Image("forgot_password2")
                        .aspectRatio(contentMode: .fit)

                    
                }
                .padding(.all)
                .frame(width: screenWidth)
                //Spacer()
                VStack {
                    VStack {
                        
                        Text("Write your email here to receive a code")
                            .font(.system(size: 20))
                            .fontWeight (.semibold)
                            .foregroundColor(.lightBlue)
                            .padding(.all)

                        TextInputField("Email", text: $viewModel.email, error: $viewModel.error)
                            .padding(.bottom)
                        
                        //Spacer()
                        
                        ZStack {
                                NavigationLink(
                                    destination: ForgotPaswordCodeScreen(),
                                    isActive: $navigationActive
                                ) {
                                    EmptyView()
                                }
                                .opacity(0)

                                Button(action: {
                                    Task {
                                        await self.viewModel.sendEmail()
                                        LoginViewModell.defaults.set(viewModel.email, forKey: "resetEmail")

                                        if self.viewModel.sent {
                                            navigationActive = true
                                        }
                                    }
                                }) {
                                        Text ("Send Code")
                                            .foregroundColor (.white)
                                            .fontWeight (.semibold)
                                            .font(.system(size:22))
                                            .frame(minWidth: 0, maxWidth: .infinity)
                                            .frame(width: screenWidth * 0.88, height: screenWidth * 0.13)
                                }
                            }
                            .buttonStyle(.borderedProminent)
                            .buttonBorderShape(.roundedRectangle)
                            .tint(Color.blue)
                            .cornerRadius(30)
                            .padding(.horizontal)
                        /*
                            Button(action: {
                                Task{
                                    await viewModel.sendEmail()
                                }
                            }, label: {
                            Text ("Send Code")
                                .foregroundColor (.white)
                                .fontWeight (.semibold)
                                .font(.system(size:22))
                                .frame(minWidth: 0, maxWidth: .infinity)
                            
                            .frame(width: screenWidth * 0.88, height: screenWidth * 0.13)
                        }
                                
                            )
                            .buttonStyle(.borderedProminent)
                            .buttonBorderShape(.roundedRectangle)
                            .tint(Color.blue)
                            .cornerRadius(30)
                            .padding(.horizontal)
                            .background(
                                NavigationLink(destination: ForgotPaswordCodeScreen(), isActive: $viewModel.sent) {
                                })*/
                    }
                    
                    
                }

            }
        }.background(
            Image("background_splash_screen")
                .resizable()
                .scaledToFill()
                .edgesIgnoringSafeArea(.all))
    }
}
#Preview {
    ForgotPasswordEmailScreen()
}
Amira
BM Amira
//
//  UserViewModel.swift
//  Aqua Guard
//
//  Created by Amira Ben Mbarek on 13/12/2023.
//

import Foundation

class UserViewModel: ObservableObject{
    @Published var isDeleted: Bool = false
    @Published var email:String = ""
    @Published var code:String = ""
    @Published var newPassword:String = ""
    @Published var confirmPassword:String = ""
    @Published var error:String = ""
    @Published var sent: Bool = false
    @Published var verified: Bool = false
    @Published var reset: Bool = false

    func deleteAccount(id: String)  {
        Task {
            do {
                let (,) = try await UserService.makeRequest(endpoint: "/deleteUserById/" + id, method: "DELETE", body: nil)
                    isDeleted = true
                } catch {
                print("Error deleting account")
                    isDeleted = false
            }
        }
    }
    
    func sendEmail() async {
        
        var json = [String:Any]()
        json["email"] = email
        
        do {
            
            await MainActor.run {
                self.sent = true
            }
            
        let (responseData, response) = try await UserService.makeRequest(endpoint: "/sendActivationCode", method: "POST", body: json)


            let httpResponse = (response as? HTTPURLResponse)
        
        if(type(of: httpResponse!) != HTTPURLResponse.self){
            await MainActor.run {
                self.error = "Unexpected error!"
                self.sent = false

            }
        }
        
        if (httpResponse!.statusCode == 200) {
                await MainActor.run {
                self.error = ""
                self.sent = true
                }

        }
        else {
            await MainActor.run {
                self.error = "Email not found!"
                self.sent = false
                }
            }
                        
        }
        catch {
            await MainActor.run {
                self.error = "Unexpected error!"
                self.sent = false
            }
        }
        
    }
    
    func verifyCode() async{
        
        var json = [String:Any]()
        json["resetCode"] = code
        json["email"] = LoginViewModell.defaults.string(forKey: "resetEmail")
        
        do {
            
            await MainActor.run {
                self.verified = true
            }
            
        let (responseData, response) = try await UserService.makeRequest(endpoint: "/verifyCode", method: "POST", body: json)


            let httpResponse = (response as? HTTPURLResponse)
        
        if(type(of: httpResponse!) != HTTPURLResponse.self){
            await MainActor.run {
                self.error = "Unexpected error!"
                self.verified = false

            }
        }
        
        if (httpResponse!.statusCode == 200) {
                await MainActor.run {
                self.error = ""
                self.verified = true
                }

        }
        else {
            await MainActor.run {
                self.error = "wrong code!"
                self.verified = false
                }
            }
                        
        }
        catch {
            await MainActor.run {
                self.error = "Unexpected error!"
                self.verified = false
            }
        }
        
    }
    
    func resetPassword() async {
        
        var json = [String:Any]()
        json["newPassword"] = newPassword
        json["confirmPassword"] = confirmPassword
        json["email"] = LoginViewModell.defaults.string(forKey: "resetEmail")

        do {
            
            await MainActor.run {
                self.reset = true
            }
            
        let (responseData, response) = try await UserService.makeRequest(endpoint: "/forgotPassword", method: "POST", body: json)


            let httpResponse = (response as? HTTPURLResponse)
        
        if(type(of: httpResponse!) != HTTPURLResponse.self){
            await MainActor.run {
                self.error = "Unexpected error!"
                self.reset = false

            }
        }
        
        if (httpResponse!.statusCode == 200) {
                await MainActor.run {
                self.error = ""
                self.reset = true
                }

        }
        else {
            await MainActor.run {
                self.error = "wrong passwords!"
                self.reset = false
                }
            }
                        
        }
        catch {
            await MainActor.run {
                self.error = "Unexpected error!"
                self.reset = false
            }
        }
        
    }
}
Écrire à BM Amira
