import Foundation
import Combine

class UserViewModel: ObservableObject {
    @Published var currentUser: User?
    @Published var message: String = ""
    @Published var isError: Bool = false

    // Assuming you have a UserService that handles network requests
    private var userService: UserService

    init(userService: UserService = .shared) {
        self.userService = userService
    }

    func verifyResetCode(email: String, resetCode: String) {
        userService.verifyResetCode(email: email, resetCode: resetCode) { [weak self] result in
            DispatchQueue.main.async {
                switch result {
                case .success(let user):
                    self?.currentUser = user
                    self?.message = "Reset code verified successfully."
                    self?.isError = false
                case .failure(let error):
                    if let networkError = error as? NetworkResponseError {
                        switch networkError {
                        case .custom(let message):
                            self?.message = message
                        }
                    } else {
                        self?.message = error.localizedDescription
                    }
                    self?.isError = true
                }
            }
        }
    }
    // ... Other methods
}

struct User: Decodable {
    // Define your User model properties here
}
