 func updatePassword(email: String, newPassword: String, completion: @escaping (Result<String, Error>) -> Void) {
        guard let url = URL(string: "\(baseURL)/newPassword") else {
            completion(.failure(NetworkError.invalidURL))
            return
        }

        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")

        let body: [String: String] = ["email": email, "newPassword": newPassword]
        request.httpBody = try? JSONSerialization.data(withJSONObject: body)

        URLSession.shared.dataTask(with: request) { data, response, error in
            DispatchQueue.main.async {
                if let error = error {
                    completion(.failure(error))
                    return
                }

                guard let httpResponse = response as? HTTPURLResponse else {
                    completion(.failure(NetworkError.invalidResponse))
                    return
                }

                if httpResponse.statusCode == 200, let data = data {
                    do {
                        if let jsonObject = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                           let message = jsonObject["message"] as? String {
                            completion(.success(message))
                        } else {
                            completion(.failure(NetworkError.invalidData))
                        }
                    } catch {
                        completion(.failure(error))
                    }
                } else {
                    completion(.failure(NetworkError.requestFailed(httpResponse.statusCode)))
                }
            }
        }.resume()
    }





import Foundation

class UserViewModel: ObservableObject {
    private var userService = UserService.shared
    @Published var message: String = ""
    @Published var isError: Bool = false

    func updatePassword(email: String, newPassword: String) {
        userService.updatePassword(email: email, newPassword: newPassword) { [weak self] result in
            DispatchQueue.main.async {
                switch result {
                case .success(let message):
                    self?.message = message
                    self?.isError = false
                case .failure(let error):
                    self?.message = error.localizedDescription
                    self?.isError = true
                }
            }
        }
    }

    // Add other user-related methods here if needed
}



import SwiftUI

struct UpdatePasswordView: View {
    @StateObject private var userViewModel = UserViewModel()
    @State private var newPassword: String = ""
    @State private var email: String = ""

    var body: some View {
        // Your view layout
        VStack {
            // ... other UI components, such as text fields for email and password

            Button("Update Password") {
                userViewModel.updatePassword(email: email, newPassword: newPassword)
            }
            // You can use the ViewModel's published properties to show error messages or success messages
        }
    }
}

struct UpdatePasswordView_Previews: PreviewProvider {
    static var previews: some View {
        UpdatePasswordView()
    }
}
