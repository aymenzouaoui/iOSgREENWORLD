enum CustomError: Error {
    case emailNotAvailable
}

func updatenewPassword(newPassword: String, completion: @escaping (Result<String, Error>) -> Void) {
    // Retrieve the email from UserDefaults
    guard let email = UserDefaults.standard.string(forKey: "UserID") else {
        completion(.failure(CustomError.emailNotAvailable))
        return
    }

    UserService.shared.updatenewPassword(email: email, newPassword: newPassword) { result in
        DispatchQueue.main.async {
            switch result {
            case .success(let message):
                self.errorMessage = nil
                self.successMessage = message
            case .failure(let error):
                self.successMessage = nil
                self.errorMessage = error.localizedDescription
            }
        }
    }
}
