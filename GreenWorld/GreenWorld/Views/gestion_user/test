func updatePassword(email: String, newPassword: String, completion: @escaping (Result<String, Error>) -> Void) {
        let url = URL(string: "\(baseURL)/newPassword")!
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")

        let body: [String: String] = ["email": email, "newPassword": newPassword]
        request.httpBody = try? JSONSerialization.data(withJSONObject: body)

        URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                completion(.failure(error))
                return
            }
            guard let httpResponse = response as? HTTPURLResponse,
                  let data = data else {
                completion(.failure(NetworkError.invalidResponse))
                return
            }

            if httpResponse.statusCode == 200 {
                do {
                    if let jsonObject = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                       let message = jsonObject["message"] as? String {
                        completion(.success(message))
                    } else {
                        completion(.failure(NetworkError.invalidData))
                    }
                } catch {
                    completion(.failure(error))
                }
            } else {
                completion(.failure(NetworkError.requestFailed(httpResponse.statusCode)))
            }
        }.resume()
    }





func updatePassword(email: String, newPassword: String) {
        userService.updatePassword(email: email, newPassword: newPassword) { [weak self] result in
            DispatchQueue.main.async {
                switch result {
                case .success(let message):
                    self?.message = message
                    self?.isError = false
                case .failure(let error):
                    self?.message = error.localizedDescription
                    self?.isError = true
                }
            }
        }
    }
