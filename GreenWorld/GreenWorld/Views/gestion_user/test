import SwiftUI

struct UserValidationCodeView: View {
    @StateObject private var userViewModel = UserViewModel()
    let email: String  // Email passed from the previous view

    @State private var code1: String = ""
    @State private var code2: String = ""
    @State private var code3: String = ""
    @State private var code4: String = ""
    @State private var navigateToResetPassword = false
    @State private var showToast = false

    var body: some View {
        NavigationView {
            VStack {
                HStack {
                    Image(systemName: "arrow.left")
                        .foregroundColor(Color.blue)
                    Spacer()
                }
                .padding()

                Text("Confirmation")
                    .foregroundColor(Color.green)
                    .font(.system(size: 24, weight: .bold))
                    .padding(.top, 25)

                Text("Enter the validation code sent to your email.")
                    .foregroundColor(Color.accentColor)
                    .font(.system(size: 18, weight: .bold))
                    .padding(.top, 20)

                HStack(spacing: 15) {
                    ForEach(0..<4, id: \.self) { index in
                        CodeInputField(text: binding(for: index))
                    }
                }
                .padding(.top, 15)

                Button(action: {
                    verifyCode()
                }) {
                    Text("Verify")
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.green)
                        .foregroundColor(.white)
                        .cornerRadius(8)
                }
                .padding(.top, 200)

                Button(action: {
                    resendCode()
                }) {
                    Text("Didn't receive the code? Resend Code")
                        .foregroundColor(Color.green)
                }
                .padding(.top, 10)

                NavigationLink(destination: ResetPasswordView(), isActive: $navigateToResetPassword) {
                    EmptyView()
                }

                if showToast {
                    Text("Verification failed. Please try again.")
                        .foregroundColor(Color.red)
                        // Add more styling for your toast message here
                }
            }
            .navigationBarHidden(true)
        }
    }

    private func binding(for index: Int) -> Binding<String> {
        switch index {
        case 0: return $code1
        case 1: return $code2
        case 2: return $code3
        case 3: return $code4
        default: fatalError("Index out of range")
        }
    }

    private func verifyCode() {
        let fullCode = code1 + code2 + code3 + code4
        userViewModel.verifyResetCode(email: email, resetCode: fullCode) { [weak self] isSuccess in
            DispatchQueue.main.async {
                if isSuccess {
                    self?.navigateToResetPassword = true
                } else {
                    self?.showToast = true
                    // Optionally, reset showToast to false after a delay
                    DispatchQueue.main.asyncAfter(deadline: .now() + 3) {
                        self?.showToast = false
                    }
                }
            }
        }
    }

    private func resendCode() {
        userViewModel.sendResetCode(email: email)
    }
}

struct CodeInputField: View {
    @Binding var text: String

    var body: some View {
        TextField("", text: $text)
            .onChange(of: text) { newValue in
                if newValue.count > 1 || !newValue.allSatisfy({ $0.isNumber }) {
                    text = String(newValue.prefix(1))
                }
            }
            .textFieldStyle(RoundedBorderTextFieldStyle())
            .frame(width: 50, height: 50)
            .font(.system(size: 24, weight: .bold))
            .multilineTextAlignment(.center)
            .keyboardType(.numberPad)
    }
}

struct UserValidationCodeView_Previews: PreviewProvider {
    static var previews: some View {
        UserValidationCodeView(email: "example@example.com")
    }
}
import { validationResult } from "express-validator";

import Produit from "../models/produit.js";

export function getAll(req, res) {
  Produit.find({})
    .then((docs) => {
      let list = [];
      for (let i = 0; i < docs.length; i++) {
        list.push({
          _id: docs[i]._id,
          title: docs[i].title,
          description: docs[i].description,
          price: docs[i].price,
          quantity: docs[i].quantity,
          category: docs[i].category,
          image: docs[i].image,
          image2: docs[i].image2,
          image3: docs[i].image3,


        });
      }
      res.status(200).json(list);
    })
    .catch((err) => {
      res.status(500).json({ error: err });
    });
}

export function addOnce(req, res) {
  if (!validationResult(req).isEmpty()) {
    res.status(400).json({ errors: validationResult(req).array() });
  } else {
    Produit.create({
      title: req.body.title,
      description: req.body.description,
      price: req.body.price,
      quantity: req.body.quantity,
      category: req.body.category,

      image: `http://192.168.1.166:9090/img/${req.file.filename}`,
      image2: req.body.image2,
      image3: req.body.image3,

    })
      .then((newProduit) => {
        res.status(200).json({
          title: newProduit.title,
          description: newProduit.description,
          price: newProduit.price,
          quantity: newProduit.quantity,
          category: newProduit.category,

          image: newProduit.image,
          image2: newProduit.image2,
          image3: newProduit.image3,
        });
      })
      .catch((err) => {
        res.status(500).json({ error: err });
      });
  }
}

export function getOnce(req, res) {
  Produit.findById(req.params.id)
    .then((doc) => {
      res.status(200).json(doc);
    })
    .catch((err) => {
      res.status(500).json({ error: err });
    });
}

export function putOnce(req, res) {
  let newProduit = {};
  if(req.file == undefined) {
    newProduit = {
      title: req.body.title,
      description: req.body.description,
      price: req.body.price,
      quantity: req.body.quantity
    }
  }
  else {
    newProduit = {
      title: req.body.title,
      description: req.body.description,
      price: req.body.price,
      quantity: req.body.quantity,
      category: req.body.category,

      image: `${req.protocol}://${req.get("host")}/img/${req.file.filename}`,
      image2: req.body.image2,
      image3: req.body.image3

    }
  }
  Produit.findByIdAndUpdate(req.params.id, newProduit)
    .then((doc1) => {
      Produit.findById(req.params.id)
        .then((doc2) => {
          res.status(200).json(doc2);
        })
        .catch((err) => {
          res.status(500).json({ error: err });
        });
    })
    .catch((err) => {
      res.status(500).json({ error: err });
    });
}
export function getRandomProduct(req, res) {
  Produit.aggregate([{ $sample: { size: 1 } }])
    .exec((err, randomProduct) => {
      if (err) {
        console.error(err);
        return res.status(500).json({ error: err.message });
      }

      if (randomProduct.length === 0) {
        return res.status(404).json({ error: "No random product found" });
      }

      res.status(200).json(randomProduct[0]);
    });
}


import { validationResult } from "express-validator";

import Produit from "../models/produit.js";

export function getAll(req, res) {
  Produit.find({})
    .then((docs) => {
      let list = [];
      for (let i = 0; i < docs.length; i++) {
        list.push({
          _id: docs[i]._id,
          title: docs[i].title,
          description: docs[i].description,
          price: docs[i].price,
          quantity: docs[i].quantity,
          category: docs[i].category,
          image: docs[i].image,
          image2: docs[i].image2,
          image3: docs[i].image3,


        });
      }
      res.status(200).json(list);
    })
    .catch((err) => {
      res.status(500).json({ error: err });
    });
}

export function addOnce(req, res) {
  if (!validationResult(req).isEmpty()) {
    res.status(400).json({ errors: validationResult(req).array() });
  } else {
    Produit.create({
      title: req.body.title,
      description: req.body.description,
      price: req.body.price,
      quantity: req.body.quantity,
      category: req.body.category,

      image: `http://192.168.1.166:9090/img/${req.file.filename}`,
      image2: req.body.image2,
      image3: req.body.image3,

    })
      .then((newProduit) => {
        res.status(200).json({
          title: newProduit.title,
          description: newProduit.description,
          price: newProduit.price,
          quantity: newProduit.quantity,
          category: newProduit.category,

          image: newProduit.image,
          image2: newProduit.image2,
          image3: newProduit.image3,
        });
      })
      .catch((err) => {
        res.status(500).json({ error: err });
      });
  }
}

export function getOnce(req, res) {
  Produit.findById(req.params.id)
    .then((doc) => {
      res.status(200).json(doc);
    })
    .catch((err) => {
      res.status(500).json({ error: err });
    });
}

export function putOnce(req, res) {
  let newProduit = {};
  if(req.file == undefined) {
    newProduit = {
      title: req.body.title,
      description: req.body.description,
      price: req.body.price,
      quantity: req.body.quantity
    }
  }
  else {
    newProduit = {
      title: req.body.title,
      description: req.body.description,
      price: req.body.price,
      quantity: req.body.quantity,
      category: req.body.category,

      image: `${req.protocol}://${req.get("host")}/img/${req.file.filename}`,
      image2: req.body.image2,
      image3: req.body.image3

    }
  }
  Produit.findByIdAndUpdate(req.params.id, newProduit)
    .then((doc1) => {
      Produit.findById(req.params.id)
        .then((doc2) => {
          res.status(200).json(doc2);
        })
        .catch((err) => {
          res.status(500).json({ error: err });
        });
    })
    .catch((err) => {
      res.status(500).json({ error: err });
    });
}
export function getRandomProduct(req, res) {
  Produit.aggregate([{ $sample: { size: 1 } }])
    .exec((err, randomProduct) => {
      if (err) {
        console.error(err);
        return res.status(500).json({ error: err.message });
      }

      if (randomProduct.length === 0) {
        return res.status(404).json({ error: "No random product found" });
      }

      res.status(200).json(randomProduct[0]);
    });
}


 func updatenewPassword(email: String, newPassword: String, completion: @escaping (Result<String, Error>) -> Void) {


